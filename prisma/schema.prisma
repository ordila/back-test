generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Product {
  id                      Int                             @id @default(autoincrement())
  categoryId              Int
  name                    String
  description             String?
  price                   Float
  discount                Float?                          @default(0.0)
  createdAt               DateTime                        @default(now())
  updatedAt               DateTime                        @updatedAt
  category                Category                        @relation(fields: [categoryId], references: [id])
  bundlesAsBundled        ProductBundle[]                 @relation("BundledProduct")
  bundlesAsMain           ProductBundle[]                 @relation("MainProduct")
  images                  ProductImage[]
  label                   ProductLabel[]
  specificationCategories ProductSpecificationsCategory[]
  variantCategories       ProductVariantCategory[]
  reviews                 Review[]
  wishList                WishList[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model WishList {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductVariantCategory {
  id          Int              @id @default(autoincrement())
  productId   Int
  name        String
  description String?
  createdAt   DateTime         @default(now())
  variants    ProductVariant[]
  product     Product          @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id            Int                    @id @default(autoincrement())
  variantValue  String
  createdAt     DateTime               @default(now())
  categoryId    Int
  price         Float?
  stockQuantity Int?
  category      ProductVariantCategory @relation(fields: [categoryId], references: [id])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductSpecificationsCategory {
  id             Int                    @id @default(autoincrement())
  productId      Int
  name           String
  description    String
  createdAt      DateTime               @default(now())
  specifications ProductSpecification[]
  product        Product                @relation(fields: [productId], references: [id])
}

model ProductSpecification {
  id                        Int                           @id @default(autoincrement())
  specificationCategoriesID Int
  key                       String
  value                     String
  createdAt                 DateTime                      @default(now())
  specificationCategories   ProductSpecificationsCategory @relation(fields: [specificationCategoriesID], references: [id])
}

model ProductLabel {
  id        Int      @id @default(autoincrement())
  productId Int
  labelId   Int
  createdAt DateTime @default(now())
  label     Label    @relation(fields: [labelId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Label {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  products    ProductLabel[]
}

model ProductBundle {
  id               Int      @id @default(autoincrement())
  mainProductId    Int
  bundledProductId Int
  bundlePrice      Float
  createdAt        DateTime @default(now())
  bundledProduct   Product  @relation("BundledProduct", fields: [bundledProductId], references: [id])
  mainProduct      Product  @relation("MainProduct", fields: [mainProductId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}
